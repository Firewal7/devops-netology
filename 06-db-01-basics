## Домашнее задание к занятию "1. Типы и структура СУБД"

## Задача 1

### Архитектор ПО решил проконсультироваться у вас, какой тип БД лучше выбрать для хранения определенных данных.

- Он вам предоставил следующие типы сущностей, которые нужно будет хранить в БД:

1) Электронные чеки в json виде

```
Документо-ориентированые БД MongoDB, документы хранятся в JSON или BSON.
```
2) Склады и автомобильные дороги для логистической компании
```
Графовые БД, на подобие GraphDB, т.к. цель оптимизация пути от точки А до точки Б.
```
3) Генеалогические деревья
```
Генеалогические деревья - оптимальным выбором будут иерархические БД, например Caché.
```
4) Кэш идентификаторов клиентов с ограниченным временем жизни для движка аутенфикации
```
Кэш идентификаторов клиентов с ограниченным временем жизни для движка аутенфикации - БД вида ключ-значение, например Redis, он может использоваться как БД, и как кэш-система.
```
5) Отношения клиент-покупка для интернет-магазина
- Выберите подходящие типы СУБД для каждой сущности и объясните свой выбор.
```
Реляционные БД, например, Postgres/MySQL, его табличное решение имеет
возможность развития.
```

## Задача 2

### Вы создали распределенное высоконагруженное приложение и хотите классифицировать его согласно CAP-теореме. Какой классификации по CAP-теореме соответствует ваша система, если (каждый пункт - это отдельная реализация вашей системы и для каждого пункта надо привести классификацию):

- А согласно PACELC-теореме, как бы вы классифицировали данные реализации?
  
1) Данные записываются на все узлы с задержкой до часа (асинхронная запись)
```
АР; PA/EL.
```
2) При сетевых сбоях, система может разделиться на 2 раздельных кластера
```
СA; EL/PC.
```
3) Система может не прислать корректный ответ или сбросить соединение
```
CP; PA/EC.
```
## Задача 3

- Могут ли в одной системе сочетаться принципы BASE и ACID? Почему?
```
Принципы BASE и ACID в одной системе сочетаться не могут, т.к. эти принципы противоречат друг другу.
- ACID говорит о том, что транзакции атомарны, согласованны, изолированны и стойки к низкоуровнемым проблемам, гарантируя надежность и предсказуемость работы системы.
- BASE гарантирует только базовую доступность и только в конечном итоге даёт согласованность данных, позволяя создавать высокопроизводительные системы.

```
## Задача 4 

### Вам дали задачу написать системное решение, основой которого бы послужили:

- фиксация некоторых значений с временем жизни
- реакция на истечение таймаута
### Вы слышали о key-value хранилище, которое имеет механизм Pub/Sub. Что это за система? Какие минусы выбора данной системы?

```
Я думаю что подойдёт Redis т.к. Redis это key-value хранилище, имеет механизм
Pub/Sub и TTL с возможностью реакции на его истечение.
Минусы: 
- Отсутствует разграничение прав доступа по пользователям.
- Отсутствует поддержка языка SQL
- Высокие требования к оперативной памяти на сервере.
- Консистентность данных - в случае отказа сервера, данные из оперативной памяти будут утеряны и сохранятся только данные с последней синхронизации с диском
- Экземпляр БД не маштабируется
```
